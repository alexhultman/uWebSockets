LIBUHD_REGISTER_COMPONENT("Micro Web Socket Core Library (uWS)" UWS_LIB ON "" OFF)

IF(UWS_LIB)
	SET( LIB_HEADERS
	${CMAKE_CURRENT_SOURCE_DIR}/Asio.h
	${CMAKE_CURRENT_SOURCE_DIR}/Backend.h
	${CMAKE_CURRENT_SOURCE_DIR}/Epoll.h
	${CMAKE_CURRENT_SOURCE_DIR}/Extensions.h
	${CMAKE_CURRENT_SOURCE_DIR}/Group.h
	${CMAKE_CURRENT_SOURCE_DIR}/Group.inl
	${CMAKE_CURRENT_SOURCE_DIR}/HTTPSocket.h
	${CMAKE_CURRENT_SOURCE_DIR}/Hub.h
	${CMAKE_CURRENT_SOURCE_DIR}/Libuv.h
	${CMAKE_CURRENT_SOURCE_DIR}/Networking.h
	${CMAKE_CURRENT_SOURCE_DIR}/Node.h
	${CMAKE_CURRENT_SOURCE_DIR}/Socket.h
	${CMAKE_CURRENT_SOURCE_DIR}/uWS.h
	${CMAKE_CURRENT_SOURCE_DIR}/WebSocket.h
	${CMAKE_CURRENT_SOURCE_DIR}/WebSocketProtocol.h
	)

	SET(LIB_SOURCES
	${CMAKE_CURRENT_SOURCE_DIR}/Epoll.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Extensions.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Group.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/HTTPResponse.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/HTTPSocket.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Hub.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Networking.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Node.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Socket.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/WebSocket.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/WebSocketProtocol.h
	)
   
	ADD_LIBRARY(uWS SHARED ${LIB_SOURCES} ${LIB_HEADERS})

	#TARGET_LINK_LIBRARIES(uWS PRIVATE)
	
	# set library properties
	SET_TARGET_PROPERTIES(uWS PROPERTIES VERSION ${${PROJECT_NAME}_VERSION_FULL} )
	IF(UNIX)
		SET_TARGET_PROPERTIES(uWS PROPERTIES SOVERSION ${${PROJECT_NAME}_VERSION_PATCH}  )
	ENDIF(UNIX)

	IF(APPLE)
		SET_TARGET_PROPERTIES(uWS PROPERTIES  INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/${LIBRARY_DIR}" )
	ENDIF(APPLE)

	IF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
		ADD_DEFINITIONS(-DEXPORT_UWS_WIN_API)
		ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)	
	ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")  

	INSTALL(TARGETS uWS
		LIBRARY DESTINATION ${LIBRARY_DIR} COMPONENT libraries # .so file
		ARCHIVE DESTINATION ${LIBRARY_DIR} COMPONENT libraries # .lib file
		RUNTIME DESTINATION ${RUNTIME_DIR} COMPONENT libraries # .dll file
	)

	UHD_INSTALL(FILES
		${LIB_HEADERS}
		DESTINATION ${INCLUDE_DIR}/
		COMPONENT headers
	)
ENDIF(UWS_LIB)
